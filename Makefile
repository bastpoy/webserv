.DEFAULT_GOAL := all

# # Colors and Styles
RESET		:=	\e[0m
RED			:=	\e[31m
GREEN		:=	\e[32m
PURPLE		:=	\e[95m
BLUE		:=	\e[34m
YELLOW		:=	\e[33m
MAGENTA		:=	\e[35m
CYAN		:=	\e[36m

# Colored Messages
MESSAGE_CLEAR		=	\e[0K\r\c
MESSAGE_OK			=	[\e[32mOK\e[0m]
MESSAGE_COMPILE		=	$(BLUE)Compiling :$(RESET)
MESSAGE_DONE		=	$(MESSAGE_OK) WebServ compiled.
MESSAGE_CLEAN		=	$(PURPLE)WebServ cleanup completed.$(RESET)

# Executable name
NAME		:=	webserv
# NAME1 = config

# Source directories and files
SRCS_DIR	:=	srcs
SRCS		=	srcs/autoIndex.cpp \
				srcs/ConfigParser.cpp \
				srcs/Location.cpp \
				srcs/main.cpp \
				srcs/Response.cpp \
				srcs/Utils.cpp \
				srcs/Server.cpp \
				srcs/CGIHandler.cpp \
				srcs/ServerParser.cpp \
				srcs/error.cpp \
				srcs/post.cpp \
				srcs/get.cpp \
				srcs/delete.cpp \
				srcs/signals.cpp \
				srcs/cookie.cpp
# srcs/Client.cpp
# srcs/socket.cpp

# SRCSPARSING =
FILE_TO_DELETE	:=	www/assets/files/file_to_delete

# Object directories and files
OBJS_DIR	:=	.objs
OBJS		:=	$(patsubst $(SRCS_DIR)/%.cpp, $(OBJS_DIR)/%.o, $(SRCS))
# OBJSPARSING = $(patsubst %.cpp, objects/%.o, $(SRCSPARSING))

# Dependency directory
DEPS_DIR	:=	.deps
DEPS		:=	$(patsubst $(OBJS_DIR)/%.o, $(DEPS_DIR)/%.d, $(OBJS))

# Compiler and flags
CXXFLAGS	:=	-Werror -Wall -Wextra -std=c++98 -g -march=native
CXX			:=	c++ $(CXXFLAGS)
DEPFLAGS	:=	-MMD -MP -MF
INCFLAGS	:=	-Iincludes
RM			:=	rm -rf

# Include automatically generated dependency files
-include $(DEPS)
# -include $(OBJSPARSING:.o=.d)

# Build the executable
$(NAME): $(OBJS)
	@$(CXX) -o $(NAME) $(OBJS)
	@echo "$(MESSAGE_DONE)"

# Compile source files into object files
$(OBJS_DIR)/%.o: $(SRCS_DIR)/%.cpp Makefile
	@mkdir -p $(dir $@) $(DEPS_DIR)
	@echo "[...] $(MESSAGE_COMPILE) $<...\r\c"
	@$(CXX) $(INCFLAGS) -c $< -o $@ $(DEPFLAGS) $(DEPS_DIR)/$*.d
	@echo "$(MESSAGE_CLEAR)"

all: $(NAME)

simple:
	@make -j4 -s
	@clear
	@./webserv conf/Bastien.conf

# parsing : $(NAME1)

file_to_delete:
	@touch $(FILE_TO_DELETE)

# Display help information
help:
	@echo "$(BLUE)Makefile commands:$(RESET)"
	@echo "  make				Build the project (default target)"
	@echo "  make all			Build the project"
	@echo "  make clean			Remove object files and dependency files"
	@echo "  make fclean		\tRemove all files generated by the build"
	@echo "  make re			Clean and rebuild the project"
	@echo "  make help			Display this help message"
	@echo "  make info			Show information about the project"

# Display project information
info:
	@echo "$(GREEN)Project: $(NAME)$(RESET)"
	@echo "Source directory: $(SRCS_DIR)"
	@echo "Object directory: $(OBJS_DIR)"
	@echo "Dependency directory: $(DEPS_DIR)"
	@echo "Source files: $(SRCS)"
	@echo "Object files: $(OBJS)"

# Check for issues
check:
	@echo "$(YELLOW)Checking for syntax errors...$(RESET)"
	@$(CXX) -fsyntax-only $(SRCS)
	@echo "$(YELLOW)Running static analysis with cppcheck...$(RESET)"
	@cppcheck --enable=all $(SRCS_DIR)
	@echo "$(YELLOW)Running static analysis with clang-tidy...$(RESET)"
	@clang-tidy $(SRCS) -- -I./includes
	@echo "$(YELLOW)Checking for coding style with clang-format...$(RESET)"
	@clang-format -style=Google -output-replacements-xml $(SRCS) | grep -c "<replacement"

# Clean object and dependency files
clean:
	@echo "$(RED)Cleaning up object files...$(RESET)"
	@$(RM) $(OBJ)
	@$(RM) $(OBJS_DIR)
	@$(RM) $(DEPS_DIR)

# Clean executable
fclean:	clean
	@echo "$(RED)Cleaning up $(NAME)...$(RESET)"
	@$(RM) $(NAME)
	@$(RM) $(FILE_TO_DELETE)

re: fclean all

# Phony targets
.PHONY: all clean fclean re

